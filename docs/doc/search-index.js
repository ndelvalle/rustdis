var searchIndex = new Map(JSON.parse('[\
["rustdis",{"doc":"","t":"PIPICCCCCCCFNNNNNNNNPPGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNCNNCCCCCCCNNCCNNCCCCCCCNCCCCCCCCCCCCCCCNNNCCNFNNNNNNNONNNOFNNNNNNNNNNGFPFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNFNNNNNNNNNNFNNNNNNNONNNFNNONNNNNONNNFNNNNNNNONNNKMFNNNNNNNONNNFNNNNNNNONNNFNNNNNNNONNNFNNONNNNNOONNNFNNNNNNNONNNFNNNNNNONONNNFNNNNNNONONNNFNNNNNNNNNNFNNNNNNNONNNFNNNNNNNOOONNNGFPNNNNNNNNNNNNNNONNNNNNFNNNNNNNONNNFNNNNNNNNNNFNNNNNNNONNNFNNNNNNNONNNFPGNNNNNNNNNNNNNNONNNNNNFNNNNNNNONNNFNNONNNNNNNNFNNNNNNONNNNFNNNNNNNONNNOFNNNNNNNONNNOFNNNNNNNOONNNOFNNNNNNNONNNFNNNNNNNONNNFNNNNNNNONNNFNNONONNNNNNOPPGPGPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHFNNNNNNNNNNNNNNNNNCH","n":["Err","Error","Ok","Result","codec","commands","connection","frame","server","store","utils","FrameCodec","borrow","borrow_mut","decode","from","into","try_from","try_into","type_id","Append","Client","Command","Command","Config","DBsize","Decr","DecrBy","Del","Exists","Get","Getdel","Getrange","Incr","IncrBy","IncrByFloat","Info","Keys","Lcs","Memory","Mget","Module","Mset","Msetnx","Object","Ping","Scan","Select","Set","Setnx","Setrange","Strlen","Ttl","Type","all_variants","append","borrow","borrow_mut","client","command","config","dbsize","decr","decrby","del","eq","exec","executable","exists","fmt","from","get","getdel","getrange","incr","incrby","incrbyfloat","info","into","keys","lcs","memory","mget","module","mset","msetnx","object","ping","scan","select","set","setnx","setrange","strlen","try_from","try_from","try_into","ttl","type_","type_id","Append","borrow","borrow_mut","eq","exec","fmt","from","into","key","try_from","try_into","type_id","value","Client","borrow","borrow_mut","eq","exec","fmt","from","into","try_from","try_into","type_id","Command","Docs","Docs","Root","Root","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","eq","eq","eq","exec","exec","exec","fmt","fmt","fmt","from","from","from","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Config","borrow","borrow_mut","eq","exec","fmt","from","into","try_from","try_into","type_id","DBSize","borrow","borrow_mut","eq","exec","fmt","from","into","try_from","try_into","type_id","Decr","borrow","borrow_mut","eq","exec","fmt","from","into","key","try_from","try_into","type_id","DecrBy","borrow","borrow_mut","decrement","eq","exec","fmt","from","into","key","try_from","try_into","type_id","Del","borrow","borrow_mut","eq","exec","fmt","from","into","keys","try_from","try_into","type_id","Executable","exec","Exists","borrow","borrow_mut","eq","exec","fmt","from","into","keys","try_from","try_into","type_id","Get","borrow","borrow_mut","eq","exec","fmt","from","into","key","try_from","try_into","type_id","Getdel","borrow","borrow_mut","eq","exec","fmt","from","into","key","try_from","try_into","type_id","Getrange","borrow","borrow_mut","end","eq","exec","fmt","from","into","key","start","try_from","try_into","type_id","Incr","borrow","borrow_mut","eq","exec","fmt","from","into","key","try_from","try_into","type_id","IncrBy","borrow","borrow_mut","eq","exec","fmt","from","increment","into","key","try_from","try_into","type_id","IncrByFloat","borrow","borrow_mut","eq","exec","fmt","from","increment","into","key","try_from","try_into","type_id","Info","borrow","borrow_mut","eq","exec","fmt","from","into","try_from","try_into","type_id","Keys","borrow","borrow_mut","eq","exec","fmt","from","into","pattern","try_from","try_into","type_id","Lcs","borrow","borrow_mut","eq","exec","fmt","from","into","key1","key2","len","try_from","try_into","type_id","Memory","Usage","Usage","borrow","borrow","borrow_mut","borrow_mut","eq","eq","exec","exec","fmt","fmt","from","from","into","into","key","try_from","try_from","try_into","try_into","type_id","type_id","Mget","borrow","borrow_mut","eq","exec","fmt","from","into","keys","try_from","try_into","type_id","Module","borrow","borrow_mut","eq","exec","fmt","from","into","try_from","try_into","type_id","Mset","borrow","borrow_mut","eq","exec","fmt","from","into","pairs","try_from","try_into","type_id","Msetnx","borrow","borrow_mut","eq","exec","fmt","from","into","pairs","try_from","try_into","type_id","Encoding","Encoding","Object","borrow","borrow","borrow_mut","borrow_mut","eq","eq","exec","exec","fmt","fmt","from","from","into","into","key","try_from","try_from","try_into","try_into","type_id","type_id","Ping","borrow","borrow_mut","eq","exec","fmt","from","into","payload","try_from","try_into","type_id","Scan","borrow","borrow_mut","cursor","eq","exec","fmt","from","into","try_from","try_into","type_id","Select","borrow","borrow_mut","eq","exec","fmt","from","index","into","try_from","try_into","type_id","Set","borrow","borrow_mut","eq","exec","fmt","from","into","key","try_from","try_into","type_id","value","Setnx","borrow","borrow_mut","eq","exec","fmt","from","into","key","try_from","try_into","type_id","value","Setrange","borrow","borrow_mut","eq","exec","fmt","from","into","key","offset","try_from","try_into","type_id","value","Strlen","borrow","borrow_mut","eq","exec","fmt","from","into","key","try_from","try_into","type_id","Ttl","borrow","borrow_mut","eq","exec","fmt","from","into","key","try_from","try_into","type_id","Type","borrow","borrow_mut","eq","exec","fmt","from","into","key","try_from","try_into","type_id","Connection","borrow","borrow_mut","client_address","from","id","into","new","read_frame","try_from","try_into","type_id","writer","Array","Bulk","Error","Error","Frame","Incomplete","Integer","InvalidDataType","Null","Other","Simple","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","parse","partial_cmp","serialize","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","run","Store","borrow","borrow_mut","default","exists","from","get","incr_by","into","iter","keys","new","remove","set","size","try_from","try_into","type_id","lcs","lcs"],"q":[[0,"rustdis"],[11,"rustdis::codec"],[20,"rustdis::commands"],[100,"rustdis::commands::append"],[113,"rustdis::commands::client"],[124,"rustdis::commands::command"],[159,"rustdis::commands::config"],[170,"rustdis::commands::dbsize"],[181,"rustdis::commands::decr"],[193,"rustdis::commands::decrby"],[206,"rustdis::commands::del"],[218,"rustdis::commands::executable"],[220,"rustdis::commands::exists"],[232,"rustdis::commands::get"],[244,"rustdis::commands::getdel"],[256,"rustdis::commands::getrange"],[270,"rustdis::commands::incr"],[282,"rustdis::commands::incrby"],[295,"rustdis::commands::incrbyfloat"],[308,"rustdis::commands::info"],[319,"rustdis::commands::keys"],[331,"rustdis::commands::lcs"],[345,"rustdis::commands::memory"],[369,"rustdis::commands::mget"],[381,"rustdis::commands::module"],[392,"rustdis::commands::mset"],[404,"rustdis::commands::msetnx"],[416,"rustdis::commands::object"],[440,"rustdis::commands::ping"],[452,"rustdis::commands::scan"],[464,"rustdis::commands::select"],[476,"rustdis::commands::set"],[489,"rustdis::commands::setnx"],[502,"rustdis::commands::setrange"],[516,"rustdis::commands::strlen"],[528,"rustdis::commands::ttl"],[540,"rustdis::commands::type_"],[552,"rustdis::connection"],[565,"rustdis::frame"],[607,"rustdis::server"],[608,"rustdis::store"],[626,"rustdis::utils"],[627,"rustdis::utils::lcs"],[628,"bytes::bytes_mut"],[629,"core::option"],[630,"core::result"],[631,"core::any"],[632,"std::sync::mutex"],[633,"alloc::sync"],[634,"core::fmt"],[635,"core::fmt"],[636,"core::net::socket_addr"],[637,"core::cmp"],[638,"alloc::string"],[639,"alloc::string"],[640,"alloc::vec"],[641,"bytes::bytes"],[642,"core::str::traits"],[643,"alloc::string"],[644,"core::default"],[645,"core::iter::traits::iterator"]],"d":["Contains the error value","","Contains the success value","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","If key already exists and is a string, this command …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Return documentary information about commands.","","Return an array with details about every Redis command.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Return the number of keys in the current database","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Decrements the number stored at key by one.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Decrements the number stored at key by <code>decrement</code>.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Removes the specified <code>keys</code>.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Returns if <code>key</code> exists.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Get the value of <code>key</code>. If the key does not exist the …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Get the value of key and delete the key. This command is …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Returns the substring of the string value stored at key, …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Increments the number stored at key by one.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Increments the number stored at key by <code>increment</code>.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Increment the string representing a floating point number …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Returns information and statistics about the server.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Return all keys matching <code>pattern</code>.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The LCS command implements the longest common subsequence …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Ref: https://redis.io/docs/latest/commands/memory-usage","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the values of all specified keys.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Module management commands.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Sets the given keys to their respective values. Replaces …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Sets the given keys to their respective values. Will not …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Encoding returns the internal encoding for the Redis …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Returns PONG if no argument is provided, otherwise return …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The SCAN command is used in order to incrementally iterate …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Select the Redis logical database having the specified …","","","","","","Returns the argument unchanged.","The GUI clients we tested send this index value as bytes. …","Calls <code>U::from(self)</code>.","","","","Set <code>key</code> to hold the <code>string</code> value. If <code>key</code> already holds a …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Set key to hold string value if key does not exist. In …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Setrange overwrites part of the string stored at key, …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Returns the length of the string value stored at key. An …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","TTL returns the remaining time to live of a key that has a …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Returns the string representation of the type of the value …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Invalid message encoding.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Longest common subsequence via Dynamic Programming"],"i":[58,0,58,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,8,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8,0,0,0,0,0,0,0,8,8,0,0,8,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,8,0,17,17,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,0,0,19,0,19,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,0,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,24,0,25,25,25,25,25,25,25,25,25,25,25,25,0,26,26,26,26,26,26,26,26,26,26,26,0,27,0,28,28,28,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29,29,29,29,0,30,30,30,30,30,30,30,30,30,30,30,0,31,31,31,31,31,31,31,31,31,31,31,31,31,0,32,32,32,32,32,32,32,32,32,32,32,0,33,33,33,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,38,38,39,38,39,38,39,38,39,38,39,38,39,38,39,39,38,39,38,39,38,39,0,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,42,0,43,43,43,43,43,43,43,43,43,43,43,0,44,0,44,45,44,45,44,45,44,45,44,45,44,45,44,45,45,44,45,44,45,44,45,0,46,46,46,46,46,46,46,46,46,46,46,0,47,47,47,47,47,47,47,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,49,49,0,50,50,50,50,50,50,50,50,50,50,50,50,0,51,51,51,51,51,51,51,51,51,51,51,51,51,0,52,52,52,52,52,52,52,52,52,52,52,0,53,53,53,53,53,53,53,53,53,53,53,0,54,54,54,54,54,54,54,54,54,54,54,0,57,57,57,57,57,57,57,57,57,57,57,57,13,13,0,13,0,61,13,61,13,61,13,61,13,61,13,13,13,13,13,61,61,13,13,61,61,61,61,13,61,13,13,13,13,13,61,13,61,13,61,13,61,13,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0],"f":"````````````{ce{}{}}0{{bd}{{h{{f{c}}e}}}{}{}}{cc{}}2{c{{h{e}}}{}{}}0{cj{}}``````````````````````````````````{{}{{n{l}}}}`55```````{{A`A`}Ab}{{A`{Ah{{Af{Ad}}}}}{{h{AjAl}}}}``{{A`An}B`}6```````8```````````````{Aj{{h{A`c}}}{}}66``5`99{{BbBb}Ab}{{Bb{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{BbAn}B`}:<`998``<<{{BdBd}Ab}{{Bd{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{BdAn}B`}=?<<;`````??????{{BfBf}Ab}{{BhBh}Ab}{{BjBj}Ab}{{Bf{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{Bh{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{Bj{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{BfAn}B`}{{BhAn}B`}{{BjAn}B`}{cc{}}00{ce{}{}}00{c{{h{e}}}{}{}}00000{cj{}}00`22{{BlBl}Ab}{{Bl{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{BlAn}B`}65443`55{{BnBn}Ab}{{Bn{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{BnAn}B`}98776`88{{C`C`}Ab}{{C`{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{C`An}B`}<;`::9`;;`{{CbCb}Ab}{{Cb{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{CbAn}B`}?>`==<`>>{{CdCd}Ab}{{Cd{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{CdAn}B`}{cc{}}{ce{}{}}`{c{{h{e}}}{}{}}0{cj{}}`{{Cf{Ah{{Af{Ad}}}}}{{h{AjAl}}}}`33{{ChCh}Ab}{{Ch{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{ChAn}B`}76`554`66{{CjCj}Ab}{{Cj{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{CjAn}B`}:9`887`99{{ClCl}Ab}{{Cl{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{ClAn}B`}=<`;;:`<<`{{CnCn}Ab}{{Cn{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{CnAn}B`}{cc{}}{ce{}{}}``{c{{h{e}}}{}{}}0{cj{}}`22{{D`D`}Ab}{{D`{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{D`An}B`}65`443`55{{DbDb}Ab}{{Db{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{DbAn}B`}9`8`776`88{{DdDd}Ab}{{Dd{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{DdAn}B`}<`;`::9`;;{{DfDf}Ab}{{Df{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{DfAn}B`}?>==<`>>{{DhDh}Ab}{{Dh{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{DhAn}B`}{cc{}}{ce{}{}}`{c{{h{e}}}{}{}}0{cj{}}`22{{DjDj}Ab}{{Dj{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{DjAn}B`}65```443```5555{{DlDl}Ab}{{DnDn}Ab}{{Dl{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{Dn{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{DlAn}B`}{{DnAn}B`}<<;;`::::99`;;{{E`E`}Ab}{{E`{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{E`An}B`}?>`==<`>>{{EbEb}Ab}{{Eb{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{EbAn}B`}{cc{}}{ce{}{}}{c{{h{e}}}{}{}}0{cj{}}`22{{EdEd}Ab}{{Ed{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{EdAn}B`}65`443`55{{EfEf}Ab}{{Ef{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{EfAn}B`}98`776```8888{{EhEh}Ab}{{EjEj}Ab}{{Eh{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{Ej{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{EhAn}B`}{{EjAn}B`}??>>`====<<`>>{{ElEl}Ab}{{El{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{ElAn}B`}{cc{}}{ce{}{}}`{c{{h{e}}}{}{}}0{cj{}}`22`{{EnEn}Ab}{{En{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{EnAn}B`}65443`55{{F`F`}Ab}{{F`{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{F`An}B`}9`8776`88{{FbFb}Ab}{{Fb{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{FbAn}B`}<;`::9``;;{{FdFd}Ab}{{Fd{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{FdAn}B`}?>`==<``>>{{FfFf}Ab}{{Ff{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{FfAn}B`}{cc{}}{ce{}{}}``{c{{h{e}}}{}{}}0{cj{}}``22{{FhFh}Ab}{{Fh{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{FhAn}B`}65`443`55{{FjFj}Ab}{{Fj{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{FjAn}B`}98`776`88{{FlFl}Ab}{{Fl{Ah{{Af{Ad}}}}}{{h{AjAl}}}}{{FlAn}B`}<;`::9`;;`<`;{{FnG`}Gb}{Gb{{Gd{{f{Aj}}}}}}<<;````````````===={AjAj}{{ce}Gf{}{}}{{AjAj}Gh}{{AjAj}Ab}{{GjAn}B`}0{{AjAn}B`}0{lGj}{GlGj}{GnGj}{cc{}}0{ce{}{}}0{{{Hb{{n{H`}}}}}{{h{AjGj}}}}{{AjAj}{{f{Gh}}}}{Aj{{Hd{H`}}}}3{cGn{}}0{c{{h{e}}}{}{}}000{cj{}}0{{}{{h{GfAl}}}}`77{{}Ad}{{Adl}Ab}:{{Adl}{{f{Hf}}}}{{Adlc}{{h{cGn}}}{HhHjHlHn}};{Ad{{`{{Id{}{{I`{{Ib{GnHf}}}}}}}}}}{Ad{{`{{Id{}{{I`{Gn}}}}}}}}53{{AdGnHf}Gf}{AdIf}::9`{{ll}Gn}","c":[],"p":[[5,"FrameCodec",11],[5,"BytesMut",628],[6,"Option",629],[6,"Result",630],[5,"TypeId",631],[1,"str"],[1,"slice"],[6,"Command",20],[1,"bool"],[5,"Store",608],[5,"Mutex",632],[5,"Arc",633],[6,"Frame",565],[8,"Error",0],[5,"Formatter",634],[8,"Result",634],[5,"Append",100],[5,"Client",113],[6,"Command",124],[5,"Root",124],[5,"Docs",124],[5,"Config",159],[5,"DBSize",170],[5,"Decr",181],[5,"DecrBy",193],[5,"Del",206],[10,"Executable",218],[5,"Exists",220],[5,"Get",232],[5,"Getdel",244],[5,"Getrange",256],[5,"Incr",270],[5,"IncrBy",282],[5,"IncrByFloat",295],[5,"Info",308],[5,"Keys",319],[5,"Lcs",331],[6,"Memory",345],[5,"Usage",345],[5,"Mget",369],[5,"Module",381],[5,"Mset",392],[5,"Msetnx",404],[6,"Object",416],[5,"Encoding",416],[5,"Ping",440],[5,"Scan",452],[5,"Select",464],[5,"Set",476],[5,"Setnx",489],[5,"Setrange",502],[5,"Strlen",516],[5,"Ttl",528],[5,"Type",540],[5,"TcpStream",635],[6,"SocketAddr",636],[5,"Connection",552],[8,"Result",0],[1,"unit"],[6,"Ordering",637],[6,"Error",565],[5,"FromUtf8Error",638],[5,"String",638],[1,"u8"],[5,"Cursor",639],[5,"Vec",640],[5,"Bytes",641],[10,"FromStr",642],[10,"ToString",638],[10,"AddAssign",643],[10,"Default",644],[17,"Item"],[1,"tuple"],[10,"Iterator",645],[1,"usize"]],"b":[[584,"impl-Display-for-Error"],[585,"impl-Debug-for-Error"],[586,"impl-Debug-for-Frame"],[587,"impl-Display-for-Frame"],[588,"impl-From%3C%26str%3E-for-Error"],[589,"impl-From%3CFromUtf8Error%3E-for-Error"],[590,"impl-From%3CString%3E-for-Error"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
